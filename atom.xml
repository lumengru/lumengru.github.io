<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>卢梦如的年轮</title>
  <subtitle>心血来潮</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://lumengru.com/"/>
  <updated>2017-07-26T05:45:14.000Z</updated>
  <id>http://lumengru.com/</id>
  
  <author>
    <name>卢梦如</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>投资理财列表</title>
    <link href="http://lumengru.com/2017/07/26/%E6%8A%95%E8%B5%84%E7%90%86%E8%B4%A2%E5%88%97%E8%A1%A8/"/>
    <id>http://lumengru.com/2017/07/26/投资理财列表/</id>
    <published>2017-07-26T04:55:52.000Z</published>
    <updated>2017-07-26T05:45:14.000Z</updated>
    
    <content type="html"><![CDATA[<p>群主是名程序员, 接触理财也有一段时间了,所以把这些平台分享出来,注意: <strong>投资有风险,理财需谨慎</strong>,这里分享的是投资返现的, 当然群主会从中间抽取一些手续费,[手动笑脸],但是5000以内<strong>不收手续费</strong></p>
<a id="more"></a>
<h2 id="诚天财富-立即返现"><a href="#诚天财富-立即返现" class="headerlink" title="诚天财富(立即返现)"></a>诚天财富(立即返现)</h2><p>这个平台运行两年了,群主通过<a href="https://www.tianyancha.com" target="_blank" rel="external">天眼查</a>,<strong>网站域名</strong>申请人等信息确定这个平台没有虚假信息</p>
<p><strong>注意:</strong><br>立返的金额就是总收益, 到期平台只返回<strong>本金</strong></p>
<h4 id="返现金额"><a href="#返现金额" class="headerlink" title="返现金额"></a>返现金额</h4><p>一月标  1000立返<strong>73.88</strong></p>
<p>一月标  5000立返<strong>370.00</strong></p>
<p>一月标  1w立返<strong>650.00</strong></p>
<p>约标   3w立返<strong>2200.00</strong></p>
<p>约标   5w立返<strong>3800.00</strong></p>
<p>约标   10万立返<strong>7900.00</strong></p>
<h4 id="做单流程-本活动日期-到2017年8月6号"><a href="#做单流程-本活动日期-到2017年8月6号" class="headerlink" title="做单流程 (本活动日期 到2017年8月6号)"></a>做单流程 (本活动日期 到2017年8月6号)</h4><ol>
<li>注册（邀请码: <strong>cfc39ef01b2a6187</strong>）戳链接<a href="http://chengtiancaifu.com//index.php?user&amp;q=reginvite&amp;u=cfc39ef01b2a6187" target="_blank" rel="external">诚天财富</a></li>
<li>认证。根据页面要求，实名认证（<strong>无需上传身份证，填写正确的身份证号即可</strong>）。手机号码认证</li>
<li>充值。点击充值，填写将要投资的金额。可以选择<strong>e汇通</strong>(支持多种银行)</li>
<li>投资。进入首页，找到一个<strong>月标</strong>点击:立即投资。</li>
<li>交单。截图（需截到用户名和投标记录）, 支付宝帐号(用户收钱), 投资平台</li>
</ol>
<p>注意：<strong>最少投资1000 ，任何银行卡都可以</strong> ,投资有风险,理财需谨慎</p>
<h2 id="财优优-次日返现"><a href="#财优优-次日返现" class="headerlink" title="财优优 (次日返现)"></a>财优优 (次日返现)</h2><p>财优优隶属上海晖先金融信息服务有限公司，注册资本1亿，<br>双APP、微信端、PC网站同时上线，国企背景。全网唯数不多的高返、安全、稳健的 爆款大毛, 本月已递交银行存管资料 8月份正式签署银行存管协议 </p>
<h4 id="返现金额-1"><a href="#返现金额-1" class="headerlink" title="返现金额"></a>返现金额</h4><ol>
<li>500档：收益：返现25+利息3.4+红包6+体验金7=<strong>41.4</strong></li>
<li>1000档：收益：返现50+利息6.8+红包18+体验金7=<strong>80.8</strong></li>
<li>5000档：收益：返现200+利息35+红包58+体验金7=<strong>300</strong></li>
<li>1W档：收益：返现400+利息68+红包128+体验金7=<strong>603</strong></li>
<li>5W档：收益：返现2300+利息342+红包308+体验金7=<strong>2957</strong>（限额10W）</li>
</ol>
<h4 id="做单流程-本活动长期有效"><a href="#做单流程-本活动长期有效" class="headerlink" title="做单流程 (本活动长期有效)"></a>做单流程 (本活动长期有效)</h4><p><a href="https://www.caiyoyoo.com/user/register.html?channelCode=eXVsdWU=&amp;channelUsers=0011" target="_blank" rel="external">电脑注册地址:https://www.caiyoyoo.com/user/register.html?channelCode=eXVsdWU=&amp;channelUsers=0011</a>, </p>
<p><a href="https://mfin.caiyoyoo.com/mobile/user/register.html?channelCode=eXVsdWU=&amp;channelUsers=0011" target="_blank" rel="external">手机注册地址:https://mfin.caiyoyoo.com/mobile/user/register.html?channelCode=eXVsdWU=&amp;channelUsers=0011</a></p>
<p>交单格式 ：姓名、电话号码、投资金额、投资平台、支付宝帐号(用户收钱)  注意：仅仅首投有效(复投返3.8） 投资时 请注意勾选使用红包  新手体验金收益会自动放进优惠里面。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;群主是名程序员, 接触理财也有一段时间了,所以把这些平台分享出来,注意: &lt;strong&gt;投资有风险,理财需谨慎&lt;/strong&gt;,这里分享的是投资返现的, 当然群主会从中间抽取一些手续费,[手动笑脸],但是5000以内&lt;strong&gt;不收手续费&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="投资理财" scheme="http://lumengru.com/categories/%E6%8A%95%E8%B5%84%E7%90%86%E8%B4%A2/"/>
    
    
      <category term="投资理财 平台列表" scheme="http://lumengru.com/tags/%E6%8A%95%E8%B5%84%E7%90%86%E8%B4%A2-%E5%B9%B3%E5%8F%B0%E5%88%97%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>Swift-去掉多余的打印</title>
    <link href="http://lumengru.com/2017/07/10/Swift-%E5%8E%BB%E6%8E%89%E5%A4%9A%E4%BD%99%E7%9A%84%E6%89%93%E5%8D%B0/"/>
    <id>http://lumengru.com/2017/07/10/Swift-去掉多余的打印/</id>
    <published>2017-07-10T07:39:02.000Z</published>
    <updated>2017-07-11T02:04:01.000Z</updated>
    
    <content type="html"><![CDATA[<p>在我们开发过程中, 工具运行时控制台有许多关于网络相关的打印,非常烦人,我们可以选择屏蔽掉这些打印</p>
<a id="more"></a>
<h2 id="屏蔽多余的打印"><a href="#屏蔽多余的打印" class="headerlink" title="屏蔽多余的打印"></a>屏蔽多余的打印</h2><p>选择Product-&gt;Scheme-&gt;Edit Scheme …或者直接按 command + shift + &lt; 快捷键，在弹出的窗口中Environment Variables 下添加 name为<strong>OS_ACTIVITY_MODE</strong>, value为<strong>disable</strong> 如图</p>
<p><img src="http://ody22imht.bkt.clouddn.com/20161021104932103.png"></p>
<h2 id="发布时取消打印-自定义打印代码"><a href="#发布时取消打印-自定义打印代码" class="headerlink" title="发布时取消打印,自定义打印代码"></a>发布时取消打印,自定义打印代码</h2><ol>
<li>OC代码</li>
</ol>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#ifndef DEBUG_MODE  </span></div><div class="line"><span class="meta">#define DLog( s, ... ) NSLog( @<span class="meta-string">"&lt;%p %@:(%d)&gt; %@"</span>, 	self, [[NSString stringWithUTF8String:__FILE__] 	lastPathComponent], __LINE__, [NSString 	stringWithFormat:(s), ##__VA_ARGS__] )  </span></div><div class="line"><span class="meta">#else  </span></div><div class="line"><span class="meta">#define DLog( s, ... )   </span></div><div class="line"><span class="meta">#endif</span></div></pre></td></tr></table></figure>
<ol>
<li>Swift代码</li>
</ol>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">LMRLog</span>&lt;T&gt;<span class="params">(message : T, file : String = #file, lineNumber : Int = #line)</span></span> &#123;</div><div class="line"></div><div class="line">	#<span class="keyword">if</span> <span class="type">DEBUG</span></div><div class="line"></div><div class="line">		<span class="keyword">let</span> fileName = (file <span class="keyword">as</span> <span class="type">NSString</span>).lastPathComponent</div><div class="line">		<span class="built_in">print</span>(<span class="string">"[\(fileName):line:\(lineNumber)]- \(message)"</span>)</div><div class="line"></div><div class="line">	#endif</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在我们开发过程中, 工具运行时控制台有许多关于网络相关的打印,非常烦人,我们可以选择屏蔽掉这些打印&lt;/p&gt;
    
    </summary>
    
      <category term="Swift" scheme="http://lumengru.com/categories/Swift/"/>
    
    
      <category term="Swift 功能" scheme="http://lumengru.com/tags/Swift-%E5%8A%9F%E8%83%BD/"/>
    
  </entry>
  
  <entry>
    <title>iOS-后台语音播报</title>
    <link href="http://lumengru.com/2017/06/23/iOS-%E5%90%8E%E5%8F%B0%E8%AF%AD%E9%9F%B3%E6%92%AD%E6%8A%A5/"/>
    <id>http://lumengru.com/2017/06/23/iOS-后台语音播报/</id>
    <published>2017-06-23T01:45:22.000Z</published>
    <updated>2017-07-25T09:34:30.000Z</updated>
    
    <content type="html"><![CDATA[<p>公司要求需要做一个类似支付宝的收款的语音播报功能,研究了一天才完成,记录下来</p>
<a id="more"></a>
<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>语音播报功能的实现必须是<strong>推送</strong>加<strong>语音合成</strong>,选择的推送是极光推送,本文最终实现的效果即使APP被杀死也可以进行语音播报</p>
<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><ol>
<li>配置推送证书,<strong>极光文档</strong>里面有,把极光推送集成进去就不说了</li>
<li><p>语音合成我用的是系统的方法,不过语音死板不好听,但是使用很简单,3行代码就可以,建议使用其他的SDK</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">AVSpeechUtterance</span> *utterance = [<span class="built_in">AVSpeechUtterance</span> speechUtteranceWithString:<span class="string">@"成功集成语音播报"</span>];</div><div class="line"> </div><div class="line"><span class="built_in">AVSpeechSynthesizer</span> *synth = [[<span class="built_in">AVSpeechSynthesizer</span> alloc] init];</div><div class="line"> </div><div class="line">[synth speakUtterance:utterance];</div></pre></td></tr></table></figure>
</li>
<li><p>在收到通知的时候使用上面的3行代码就可以进行语音播报,但是只限于APP<strong>前台</strong>运行,当后台运行的时候语音播报便不可以了,此时需要加入下面代码让语音播报可以在后台运行,但是杀死的情况下不能播报,杀死重新启动返回后台也不可以播报. 我是在<strong>AppDelegate</strong>里面写入这个方法的</p>
 <figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">- (<span class="built_in">BOOL</span>)application:(<span class="built_in">UIApplication</span> *)application didFinishLaunchingWithOptions:(<span class="built_in">NSDictionary</span> *)launchOptions;</div></pre></td></tr></table></figure>
<p>把下面的代码写入进去</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">NSError</span> *error = <span class="literal">NULL</span>;</div><div class="line"> </div><div class="line"><span class="built_in">AVAudioSession</span> *session = [<span class="built_in">AVAudioSession</span> sharedInstance];</div><div class="line"> </div><div class="line">[session setCategory:<span class="built_in">AVAudioSessionCategoryPlayback</span> error:&amp;error];</div><div class="line"> </div><div class="line"><span class="keyword">if</span>(error) &#123;</div><div class="line">    <span class="comment">// Do some error handling</span></div><div class="line">     </div><div class="line">&#125;</div><div class="line"> </div><div class="line">[session setActive:<span class="literal">YES</span> error:&amp;error];</div><div class="line"> </div><div class="line"><span class="keyword">if</span> (error) &#123;</div><div class="line">    <span class="comment">// Do some error handling</span></div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="comment">// 让app支持接受远程控制事件</span></div><div class="line">[[<span class="built_in">UIApplication</span> sharedApplication] beginReceivingRemoteControlEvents];</div></pre></td></tr></table></figure>
</li>
<li><p>让语音播报在后台也可以进行的话就需要在</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 在AppDelegate定义属性</span></div><div class="line"></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">unsafe_unretained</span>) <span class="built_in">UIBackgroundTaskIdentifier</span> backgroundTaskIdentifier;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)applicationWillResignActive:(<span class="built_in">UIApplication</span> *)application;</div></pre></td></tr></table></figure>
<p>里面加入以下的方法</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)applicationWillResignActive:(<span class="built_in">UIApplication</span> *)application &#123;</div><div class="line"> </div><div class="line">  	<span class="comment">// 开启后台处理多媒体事件</span></div><div class="line">  </div><div class="line">  	[[<span class="built_in">UIApplication</span> sharedApplication] beginReceivingRemoteControlEvents];</div><div class="line">  </div><div class="line">  	<span class="built_in">AVAudioSession</span> *session=[<span class="built_in">AVAudioSession</span> sharedInstance];</div><div class="line">  </div><div class="line">  	[session setActive:<span class="literal">YES</span> error:<span class="literal">nil</span>];</div><div class="line">  </div><div class="line">  	<span class="comment">// 后台播放</span></div><div class="line">  </div><div class="line">  	[session setCategory:<span class="built_in">AVAudioSessionCategoryPlayback</span> error:<span class="literal">nil</span>];</div><div class="line">  </div><div class="line">  	<span class="comment">// 这样做，可以在按home键进入后台后 ，播放一段时间，几分钟吧。但是不能持续播放网络歌曲，若需要持续播放网络歌曲，还需要申请后台任务id，具体做法是：</span></div><div class="line">  </div><div class="line">  	_backgroundTaskIdentifier=[AppDelegate backgroundPlayerID:_backgroundTaskIdentifier];</div><div class="line">  </div><div class="line">  	<span class="comment">// 其中的_bgTaskId是后台任务UIBackgroundTaskIdentifier _bgTaskId;</span></div><div class="line">   </div><div class="line">&#125;</div><div class="line"><span class="comment">//实现一下backgroundPlayerID:这个方法:</span></div><div class="line"></div><div class="line">+(<span class="built_in">UIBackgroundTaskIdentifier</span>)backgroundPlayerID:(<span class="built_in">UIBackgroundTaskIdentifier</span>)backTaskId&#123;</div><div class="line"></div><div class="line">  	<span class="comment">//设置并激活音频会话类别</span></div><div class="line">  </div><div class="line">  	<span class="built_in">AVAudioSession</span> *session=[<span class="built_in">AVAudioSession</span> sharedInstance];</div><div class="line">  </div><div class="line">  	[session setCategory:<span class="built_in">AVAudioSessionCategoryPlayback</span> error:<span class="literal">nil</span>];</div><div class="line">  </div><div class="line">  	[session setActive:<span class="literal">YES</span> error:<span class="literal">nil</span>];</div><div class="line">  </div><div class="line">  	<span class="comment">//允许应用程序接收远程控制</span></div><div class="line">  </div><div class="line">  	[[<span class="built_in">UIApplication</span> sharedApplication] beginReceivingRemoteControlEvents];</div><div class="line">  </div><div class="line">  	<span class="comment">//设置后台任务ID</span></div><div class="line">  </div><div class="line">  	<span class="built_in">UIBackgroundTaskIdentifier</span> newTaskId=<span class="built_in">UIBackgroundTaskInvalid</span>;</div><div class="line">  </div><div class="line">  	newTaskId=[[<span class="built_in">UIApplication</span> sharedApplication] beginBackgroundTaskWithExpirationHandler:<span class="literal">nil</span>];</div><div class="line">  </div><div class="line">  	<span class="keyword">if</span>(newTaskId!=<span class="built_in">UIBackgroundTaskInvalid</span>&amp;&amp;backTaskId!=<span class="built_in">UIBackgroundTaskInvalid</span>)&#123;</div><div class="line">  </div><div class="line">  	[[<span class="built_in">UIApplication</span> sharedApplication] endBackgroundTask:backTaskId];</div><div class="line">  </div><div class="line">  	&#125;</div><div class="line">  </div><div class="line">  	<span class="keyword">return</span> newTaskId;</div><div class="line"></div><div class="line">  &#125;</div></pre></td></tr></table></figure>
</li>
<li><p>到这里就可以进行后台播报了,但是注意 <strong>到这一步只有在程序没有被杀死的情况下才可以播报, 杀死之后是不能播报的, 所有我们还要进行处理,这时需要使用 UNNotificationServiceExtension</strong>.</p>
<ul>
<li><p>创建 UNNotificationServiceExtension</p>
<p> <img src="http://ody22imht.bkt.clouddn.com/82BFD5E2-3F9A-4016-803A-9A9CC53E4F11.png" style="zoom:20%"></p>
<p> 填写文件名,边创建好了</p>
<p> <img src="http://ody22imht.bkt.clouddn.com/WX20170623-102242@2x.png" style="zoom:20%"></p>
</li>
<li><p>在 <strong>NotificationService.m</strong> 里面有一个方法</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)didReceiveNotificationRequest:(UNNotificationRequest *)request withContentHandler:(<span class="keyword">void</span> (^)(UNNotificationContent * _Nonnull))contentHandler;</div></pre></td></tr></table></figure>
<p>   此时把语音播报写进去就可以了</p>
   <figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)didReceiveNotificationRequest:(UNNotificationRequest *)request withContentHandler:(<span class="keyword">void</span> (^)(UNNotificationContent * _Nonnull))contentHandler &#123;</div><div class="line">    		</div><div class="line">    	<span class="keyword">self</span>.contentHandler = contentHandler;</div><div class="line">    		</div><div class="line">    	<span class="keyword">self</span>.bestAttemptContent = [request.content mutableCopy];</div><div class="line">    </div><div class="line">    	<span class="comment">// Modify the notification content here...</span></div><div class="line">    		</div><div class="line">    	<span class="keyword">self</span>.bestAttemptContent.title = [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"%@ [modified]"</span>, <span class="keyword">self</span>.bestAttemptContent.title];</div><div class="line">    </div><div class="line">    	<span class="built_in">NSString</span> *content = request.content.userInfo[<span class="string">@"aps"</span>][<span class="string">@"alert"</span>][<span class="string">@"body"</span>];</div><div class="line">    </div><div class="line">    	<span class="built_in">AVSpeechUtterance</span> *utterance = [<span class="built_in">AVSpeechUtterance</span> speechUtteranceWithString:content];</div><div class="line">    </div><div class="line">    	<span class="built_in">AVSpeechSynthesizer</span> *synth = [[<span class="built_in">AVSpeechSynthesizer</span> alloc] init];</div><div class="line">    </div><div class="line">    	[synth speakUtterance:utterance];</div><div class="line">    </div><div class="line">    	<span class="keyword">self</span>.contentHandler(<span class="keyword">self</span>.bestAttemptContent);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>认为到这里就完成了?,NO!在发送推送的时候还需要在<strong>极光推送服务</strong>里面配置一下</p>
<p><img src="http://ody22imht.bkt.clouddn.com/WX20170623-103137.png" style="zoom:20%"></p>
</li>
</ul>
</li>
</ol>
<p>到这一步的时候,后台播报就可以执行了, 但是 <strong>此播报服务只能在 iOS10 系统之后才可以进行</strong>, 如果想适配iOS9之前的只能做一个固定的音频文件放到项目里面,比如支付宝的的到账提醒, 然后在推送的时候</p>
<p><img src="http://ody22imht.bkt.clouddn.com/WX20170623-103724.png" style="zoom:20%"></p>
<p>这时候就可以完美播放音频文件了, 提醒: <strong>如果不需要动态的语音播放, 直接可以使用这个方法,不需要配置 UNNotificationServiceExtension 和后台播放了,因为这个方法是系统认为推送的提示音</strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;公司要求需要做一个类似支付宝的收款的语音播报功能,研究了一天才完成,记录下来&lt;/p&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://lumengru.com/categories/iOS/"/>
    
    
      <category term="iOS 功能" scheme="http://lumengru.com/tags/iOS-%E5%8A%9F%E8%83%BD/"/>
    
  </entry>
  
  <entry>
    <title>Swift-扩展方法</title>
    <link href="http://lumengru.com/2017/06/12/Swift-%E6%89%A9%E5%B1%95%E6%96%B9%E6%B3%95/"/>
    <id>http://lumengru.com/2017/06/12/Swift-扩展方法/</id>
    <published>2017-06-12T02:44:44.000Z</published>
    <updated>2017-06-12T11:35:45.000Z</updated>
    
    <content type="html"><![CDATA[<p>在使用Swfit的过程中把各种方法扩展起来,方便用于开发,<strong>Swift3.0</strong>版本</p>
<a id="more"></a>
<h2 id="扩展的写法"><a href="#扩展的写法" class="headerlink" title="扩展的写法"></a>扩展的写法</h2><ul>
<li><p>因为Swift 不需要在使用相应的头文件的时候引入头文件所以可以把这些扩展方法写到同一个文件中,这个是和OC的区别, 例子:</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 扩展 String 类型</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">String</span> </span>&#123;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 扩展UILabel</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">UILabel</span> </span>&#123;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="扩展String"><a href="#扩展String" class="headerlink" title="扩展String"></a>扩展String</h2><ol>
<li><p>获取字符串的高度</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">getTextHeight</span><span class="params">(font:CGFloat,width:CGFloat)</span></span> -&gt; <span class="type">CGFloat</span> &#123;</div><div class="line">     </div><div class="line">     <span class="keyword">let</span> normalText = <span class="keyword">self</span> <span class="keyword">as</span> <span class="type">NSString</span></div><div class="line">     </div><div class="line">     <span class="keyword">let</span> size = <span class="type">CGSize</span>(width: width, height: <span class="type">CGFloat</span>(<span class="type">MAXFLOAT</span>))</div><div class="line">     </div><div class="line">     <span class="keyword">let</span> fontS = <span class="type">UIFont</span>.systemFont(ofSize: font)</div><div class="line">     </div><div class="line">     <span class="keyword">let</span> dic = <span class="type">NSDictionary</span>(object: fontS, forKey: <span class="type">NSFontAttributeName</span> <span class="keyword">as</span> <span class="type">NSCopying</span>)</div><div class="line">     </div><div class="line">     <span class="keyword">let</span> stringSize = normalText.boundingRect(with: size, options: .usesLineFragmentOrigin, attributes: dic <span class="keyword">as</span>? [<span class="type">String</span> : <span class="type">AnyObject</span>], context:<span class="literal">nil</span>).size</div><div class="line">     </div><div class="line">     <span class="keyword">return</span> stringSize.height</div><div class="line">     </div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>获取字符串的长度</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">getTexWidth</span><span class="params">(font:CGFloat,height:CGFloat)</span></span> -&gt; <span class="type">CGFloat</span> &#123;</div><div class="line">     </div><div class="line">     <span class="keyword">let</span> normalText: <span class="type">NSString</span> = <span class="keyword">self</span> <span class="keyword">as</span> <span class="type">NSString</span></div><div class="line">     </div><div class="line">     <span class="keyword">let</span> size = <span class="type">CGSize</span>(width: <span class="type">CGFloat</span>(<span class="type">MAXFLOAT</span>), height: height)</div><div class="line">     </div><div class="line">     <span class="keyword">let</span> fontS = <span class="type">UIFont</span>.systemFont(ofSize: font)</div><div class="line">     </div><div class="line">     <span class="keyword">let</span> dic = <span class="type">NSDictionary</span>(object: fontS, forKey: <span class="type">NSFontAttributeName</span> <span class="keyword">as</span> <span class="type">NSCopying</span>)</div><div class="line">     </div><div class="line">     <span class="keyword">let</span> stringSize = normalText.boundingRect(with: size, options: .usesLineFragmentOrigin, attributes: dic <span class="keyword">as</span>? [<span class="type">String</span> : <span class="type">AnyObject</span>], context:<span class="literal">nil</span>).size</div><div class="line">     </div><div class="line">     <span class="keyword">return</span> stringSize.width</div><div class="line">     </div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>MD5 加密</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> md5 : <span class="type">String</span>&#123;</div><div class="line">     </div><div class="line">    <span class="keyword">let</span> str = <span class="keyword">self</span>.cString(using: <span class="type">String</span>.<span class="type">Encoding</span>.utf8)</div><div class="line">     </div><div class="line">    <span class="keyword">let</span> strLen = <span class="type">CUnsignedInt</span>(<span class="keyword">self</span>.lengthOfBytes(using: <span class="type">String</span>.<span class="type">Encoding</span>.utf8))</div><div class="line">     </div><div class="line">    <span class="keyword">let</span> digestLen = <span class="type">Int</span>(<span class="type">CC_MD5_DIGEST_LENGTH</span>)</div><div class="line">     </div><div class="line">    <span class="keyword">let</span> result = <span class="type">UnsafeMutablePointer</span>&lt;<span class="type">CUnsignedChar</span>&gt;.allocate(capacity: digestLen)</div><div class="line">     </div><div class="line">    <span class="type">CC_MD5</span>(str!, strLen, result)</div><div class="line">     </div><div class="line">    <span class="keyword">let</span> hash = <span class="type">NSMutableString</span>()</div><div class="line">     </div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span> ..&lt; digestLen &#123;</div><div class="line">         </div><div class="line">        hash.appendFormat(<span class="string">"%02x"</span>, result[i])</div><div class="line">         </div><div class="line">    &#125;</div><div class="line">     </div><div class="line">    result.deinitialize()</div><div class="line">     </div><div class="line">    <span class="keyword">return</span> <span class="type">String</span>(format: hash <span class="keyword">as</span> <span class="type">String</span>)</div><div class="line">     </div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>汉字转拼音(需要消耗不少性能,注意使用)</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">transformToPinYin</span><span class="params">()</span></span> -&gt; <span class="type">String</span> &#123;</div><div class="line">     </div><div class="line">    <span class="keyword">let</span> mutableString = <span class="type">NSMutableString</span>(string: <span class="keyword">self</span>)</div><div class="line">     </div><div class="line">    <span class="comment">//把汉字转为拼音</span></div><div class="line">     </div><div class="line">    <span class="type">CFStringTransform</span>(mutableString, <span class="literal">nil</span>, kCFStringTransformToLatin, <span class="literal">false</span>)</div><div class="line">     </div><div class="line">    <span class="comment">//去掉拼音的音标</span></div><div class="line">     </div><div class="line">    <span class="type">CFStringTransform</span>(mutableString, <span class="literal">nil</span>, kCFStringTransformStripDiacritics, <span class="literal">false</span>)</div><div class="line">     </div><div class="line">    <span class="keyword">let</span> string = <span class="type">String</span>(mutableString)</div><div class="line">     </div><div class="line">    <span class="comment">//去掉空格</span></div><div class="line">     </div><div class="line">    <span class="keyword">return</span> string.replacingOccurrences(of: <span class="string">" "</span>, with: <span class="string">""</span>)</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<p>把这些方法全部放到下面的的代码里面,即可使用</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 扩展 String 类型</span></div><div class="line">  </div><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">String</span> </span>&#123;</div><div class="line">  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="扩展UILabel"><a href="#扩展UILabel" class="headerlink" title="扩展UILabel"></a>扩展UILabel</h2><ol>
<li><p>修改UILabel的行间距</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">modifyTheLineSpacing</span><span class="params">(<span class="built_in">distance</span>: CGFloat)</span></span> &#123;</div><div class="line">     </div><div class="line">     <span class="keyword">let</span> attributedString: <span class="type">NSMutableAttributedString</span> = <span class="type">NSMutableAttributedString</span>(string: <span class="keyword">self</span>.text!)</div><div class="line">     </div><div class="line">     <span class="keyword">let</span> paragraphStyle: <span class="type">NSMutableParagraphStyle</span> = <span class="type">NSMutableParagraphStyle</span>()</div><div class="line">     </div><div class="line">     paragraphStyle.lineSpacing = <span class="built_in">distance</span>       <span class="comment">// 调整行间距</span></div><div class="line">     </div><div class="line">     attributedString.addAttribute(<span class="type">NSParagraphStyleAttributeName</span>, value: paragraphStyle, range: <span class="type">NSMakeRange</span>(<span class="number">0</span>, (<span class="keyword">self</span>.text! <span class="keyword">as</span> <span class="type">NSString</span>).length))</div><div class="line">     </div><div class="line">     <span class="keyword">self</span>.attributedText = attributedString;</div><div class="line">     </div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<ol>
<li><p>修改字体颜色</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">changeTheTextColor</span><span class="params">(textColor: UIColor, textFont: CGFloat, range: NSRange)</span></span> &#123;</div><div class="line">     </div><div class="line">     <span class="keyword">let</span> attributedString: <span class="type">NSMutableAttributedString</span> = <span class="type">NSMutableAttributedString</span>(string: <span class="keyword">self</span>.text!)</div><div class="line">     </div><div class="line">     <span class="keyword">let</span> attris: [<span class="type">String</span>: <span class="type">AnyObject</span>] = [</div><div class="line">         </div><div class="line">         <span class="type">NSForegroundColorAttributeName</span>: textColor,</div><div class="line">         </div><div class="line">         <span class="type">NSFontAttributeName</span>: <span class="type">UIFont</span>.systemFont(ofSize: textFont),</div><div class="line">         </div><div class="line">         <span class="type">NSBackgroundColorAttributeName</span>: <span class="keyword">self</span>.backgroundColor!</div><div class="line">         </div><div class="line">     ]</div><div class="line">     </div><div class="line">     attributedString.addAttributes(attris, range: range)</div><div class="line">     </div><div class="line">     <span class="keyword">self</span>.attributedText = attributedString;</div><div class="line">     </div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<p>把这些方法全部放到下面的的代码里面,即可使用</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 扩展 String 类型</span></div><div class="line">  </div><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">UILabel</span> </span>&#123;</div><div class="line">  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="扩展UIView"><a href="#扩展UIView" class="headerlink" title="扩展UIView"></a>扩展UIView</h2><p>写在扩展前面,因为我比较喜欢使用<strong>Frame</strong>布局,没有使用Xib,SB等, 一开始使用布局的时候都是使用</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">self</span>.view.frame.size.with + <span class="keyword">self</span>.view.frame.origin.x</div></pre></td></tr></table></figure>
<p>这样布局, 写着很累,个人能力又有较大的提升的时候,对<strong>UIView进行扩展</strong>之后,想要和上面的代码拥有相同的效果便很简单了</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">self</span>.view.maxX</div></pre></td></tr></table></figure>
<p>是不是很简单?</p>
<p>对<strong>UIView</strong>进行扩展</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">UIView</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="comment">// 获取view左边的坐标</span></div><div class="line">    </div><div class="line">    <span class="keyword">var</span> minX: <span class="type">CGFloat</span> &#123;</div><div class="line">        </div><div class="line">        <span class="keyword">return</span> <span class="keyword">self</span>.frame.origin.x</div><div class="line">        </div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">// 获取view右边的坐标</span></div><div class="line">    </div><div class="line">    <span class="keyword">var</span> maxX: <span class="type">CGFloat</span> &#123;</div><div class="line">        </div><div class="line">        <span class="keyword">return</span> <span class="keyword">self</span>.frame.origin.x + <span class="keyword">self</span>.frame.size.width</div><div class="line">        </div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">// 获取view上边的坐标</span></div><div class="line">    </div><div class="line">    <span class="keyword">var</span> minY: <span class="type">CGFloat</span> &#123;</div><div class="line">        </div><div class="line">        <span class="keyword">return</span> <span class="keyword">self</span>.frame.origin.y</div><div class="line">        </div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">// 获取view下边的坐标</span></div><div class="line">    </div><div class="line">    <span class="keyword">var</span> maxY: <span class="type">CGFloat</span> &#123;</div><div class="line">        </div><div class="line">        <span class="keyword">return</span> <span class="keyword">self</span>.frame.origin.y + <span class="keyword">self</span>.frame.size.height</div><div class="line">        </div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">// 获取view的x轴的中心点</span></div><div class="line">    </div><div class="line">    <span class="keyword">var</span> centerX: <span class="type">CGFloat</span> &#123;</div><div class="line">        </div><div class="line">        <span class="keyword">return</span> <span class="keyword">self</span>.center.x</div><div class="line">        </div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">// 获取view的y轴的中心点</span></div><div class="line">    </div><div class="line">    <span class="keyword">var</span> centerY: <span class="type">CGFloat</span> &#123;</div><div class="line">        </div><div class="line">        <span class="keyword">return</span> <span class="keyword">self</span>.center.y</div><div class="line">        </div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">// 获取view的宽度</span></div><div class="line">    </div><div class="line">    <span class="keyword">var</span> width: <span class="type">CGFloat</span> &#123;</div><div class="line">        </div><div class="line">        <span class="keyword">return</span> <span class="keyword">self</span>.frame.size.width</div><div class="line">        </div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">// 获取view的高度</span></div><div class="line">    </div><div class="line">    <span class="keyword">var</span> height: <span class="type">CGFloat</span> &#123;</div><div class="line">        </div><div class="line">        <span class="keyword">return</span> <span class="keyword">self</span>.frame.size.height</div><div class="line">        </div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">// 获取view的size</span></div><div class="line">    </div><div class="line">    <span class="keyword">var</span> size: <span class="type">CGSize</span> &#123;</div><div class="line">        </div><div class="line">        <span class="keyword">return</span> <span class="keyword">self</span>.frame.size</div><div class="line">        </div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>使用方法很简单,比如</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//获取View的高度</span></div><div class="line"></div><div class="line"><span class="keyword">self</span>.view.height</div><div class="line"></div><div class="line"><span class="comment">//获取View的宽度</span></div><div class="line"></div><div class="line"><span class="keyword">self</span>.view.width</div></pre></td></tr></table></figure>
<h2 id="扩展UIImage"><a href="#扩展UIImage" class="headerlink" title="扩展UIImage"></a>扩展UIImage</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">UIImage</span></span>&#123;</div><div class="line">    </div><div class="line">    <span class="comment">// 重设图片大小</span></div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">changeImageSize</span><span class="params">(size:CGSize)</span></span> -&gt; <span class="type">UIImage</span> &#123;</div><div class="line">        <span class="type">UIGraphicsBeginImageContextWithOptions</span>(size,<span class="literal">false</span>,<span class="type">UIScreen</span>.main.scale);</div><div class="line">        </div><div class="line">        <span class="keyword">self</span>.draw(<span class="keyword">in</span>: <span class="type">CGRect</span>(x: <span class="number">0</span>, y: <span class="number">0</span>, width: size.width, height: size.height))</div><div class="line">        </div><div class="line">        <span class="keyword">let</span> resizeImage: <span class="type">UIImage</span> = <span class="type">UIGraphicsGetImageFromCurrentImageContext</span>()!</div><div class="line">        </div><div class="line">        <span class="type">UIGraphicsEndImageContext</span>();</div><div class="line">        </div><div class="line">        <span class="keyword">return</span> resizeImage;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">// 等比例缩放</span></div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">scaleImage</span><span class="params">(scaleSize:CGFloat)</span></span> -&gt; <span class="type">UIImage</span> &#123;</div><div class="line">        </div><div class="line">        <span class="keyword">let</span> reSize = <span class="type">CGSize</span>(width: <span class="keyword">self</span>.size.width * scaleSize, height: <span class="keyword">self</span>.size.height * scaleSize)</div><div class="line">        </div><div class="line">        <span class="keyword">return</span> changeImageSize(size: reSize)</div><div class="line">        </div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="扩展UIColor"><a href="#扩展UIColor" class="headerlink" title="扩展UIColor"></a>扩展UIColor</h2><p>当设计师给的16进制颜色的时候便可以调用下面的方法</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">UIColor</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="keyword">convenience</span> <span class="keyword">init</span>(hexString: <span class="type">String</span>) &#123;</div><div class="line">        </div><div class="line">        <span class="comment">// 存储转换后的数值</span></div><div class="line">        </div><div class="line">        <span class="keyword">var</span> red:<span class="type">UInt32</span> = <span class="number">0</span>, green:<span class="type">UInt32</span> = <span class="number">0</span>, blue:<span class="type">UInt32</span> = <span class="number">0</span></div><div class="line">        </div><div class="line">        <span class="comment">// 分别转换进行转换</span></div><div class="line">        </div><div class="line">        <span class="type">Scanner</span>(string: hexString[<span class="number">0</span>..&lt;<span class="number">2</span>]).scanHexInt32(&amp;red)</div><div class="line">        </div><div class="line">        <span class="type">Scanner</span>(string: hexString[<span class="number">2</span>..&lt;<span class="number">4</span>]).scanHexInt32(&amp;green)</div><div class="line">        </div><div class="line">        <span class="type">Scanner</span>(string: hexString[<span class="number">4</span>..&lt;<span class="number">6</span>]).scanHexInt32(&amp;blue)</div><div class="line">        </div><div class="line">        <span class="keyword">self</span>.<span class="keyword">init</span>(red: <span class="type">CGFloat</span>(red)/<span class="number">255.0</span>, green: <span class="type">CGFloat</span>(green)/<span class="number">255.0</span>, blue: <span class="type">CGFloat</span>(blue)/<span class="number">255.0</span>, alpha: <span class="number">1.0</span>)</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    </div><div class="line">    <span class="keyword">convenience</span> <span class="keyword">init</span>(hexString: <span class="type">String</span>, alpha: <span class="type">CGFloat</span>) &#123;</div><div class="line">        </div><div class="line">        <span class="comment">// 存储转换后的数值</span></div><div class="line">        </div><div class="line">        <span class="keyword">var</span> red:<span class="type">UInt32</span> = <span class="number">0</span>, green:<span class="type">UInt32</span> = <span class="number">0</span>, blue:<span class="type">UInt32</span> = <span class="number">0</span></div><div class="line">        </div><div class="line">        <span class="comment">// 分别转换进行转换</span></div><div class="line">        </div><div class="line">        <span class="type">Scanner</span>(string: hexString[<span class="number">0</span>..&lt;<span class="number">2</span>]).scanHexInt32(&amp;red)</div><div class="line">        </div><div class="line">        <span class="type">Scanner</span>(string: hexString[<span class="number">2</span>..&lt;<span class="number">4</span>]).scanHexInt32(&amp;green)</div><div class="line">        </div><div class="line">        <span class="type">Scanner</span>(string: hexString[<span class="number">4</span>..&lt;<span class="number">6</span>]).scanHexInt32(&amp;blue)</div><div class="line">        </div><div class="line">        <span class="keyword">self</span>.<span class="keyword">init</span>(red: <span class="type">CGFloat</span>(red)/<span class="number">255.0</span>, green: <span class="type">CGFloat</span>(green)/<span class="number">255.0</span>, blue: <span class="type">CGFloat</span>(blue)/<span class="number">255.0</span>, alpha: alpha)</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>使用方法</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">imageView.backgroundColor = <span class="type">UIColor</span>(hexString: <span class="string">"eeeeee"</span>)</div></pre></td></tr></table></figure>
<h2 id="扩展-提示框-UIAlertController"><a href="#扩展-提示框-UIAlertController" class="headerlink" title="扩展 提示框 UIAlertController"></a>扩展 提示框 UIAlertController</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">UIAlertController</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">func</span> <span class="title">createUIAlertController</span>(<span class="title">title</span>: <span class="title">String</span>?, <span class="title">message</span>: <span class="title">String</span>?, <span class="title">leftButton</span>: <span class="title">String</span>, <span class="title">rightButton</span>: <span class="title">String</span>, <span class="title">complete</span>: @<span class="title">escaping</span> () -&gt; <span class="title">Void</span>) -&gt; <span class="title">UIAlertController</span></span>&#123;</div><div class="line">        </div><div class="line">        <span class="keyword">let</span> av = <span class="type">UIAlertController</span>(title: title, message: message, preferredStyle: .alert)</div><div class="line">        </div><div class="line">        <span class="keyword">let</span> cancel = <span class="type">UIAlertAction</span>(title: leftButton, style: .cancel, handler: <span class="literal">nil</span>)</div><div class="line">        </div><div class="line">        <span class="keyword">let</span> confirm = <span class="type">UIAlertAction</span>(title: rightButton, style: .destructive, handler: &#123; (action) <span class="keyword">in</span></div><div class="line">            </div><div class="line">            complete()</div><div class="line">          </div><div class="line">        &#125;)</div><div class="line">        </div><div class="line">        av.addAction(cancel)</div><div class="line">        </div><div class="line">        av.addAction(confirm)</div><div class="line">        </div><div class="line">        <span class="keyword">return</span> av</div><div class="line">        </div><div class="line">    &#125;</div><div class="line"></div><div class="line">    </div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">func</span> <span class="title">createUIAlertController</span>(<span class="title">title</span>: <span class="title">String</span>?, <span class="title">message</span>: <span class="title">String</span>?, <span class="title">leftButton</span>: <span class="title">String</span>, <span class="title">rightButton</span>: <span class="title">String</span>, <span class="title">cancel</span>: @<span class="title">escaping</span>() -&gt; <span class="title">Void</span>, <span class="title">complete</span>: @<span class="title">escaping</span> () -&gt; <span class="title">Void</span>) -&gt; <span class="title">UIAlertController</span></span>&#123;</div><div class="line">        </div><div class="line">        <span class="keyword">let</span> av = <span class="type">UIAlertController</span>(title: title, message: message, preferredStyle: .alert)</div><div class="line">        </div><div class="line">        <span class="keyword">let</span> cancel = <span class="type">UIAlertAction</span>(title: leftButton, style: .cancel) &#123; (action) <span class="keyword">in</span></div><div class="line">            </div><div class="line">            cancel()</div><div class="line">            </div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">let</span> confirm = <span class="type">UIAlertAction</span>(title: rightButton, style: .destructive, handler: &#123; (action) <span class="keyword">in</span></div><div class="line">            </div><div class="line">            complete()</div><div class="line">           </div><div class="line">        &#125;)</div><div class="line">        </div><div class="line">        av.addAction(cancel)</div><div class="line">        </div><div class="line">        av.addAction(confirm)</div><div class="line">        </div><div class="line">        <span class="keyword">return</span> av</div><div class="line">        </div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>使用方法</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">self</span>.present(<span class="type">UIAlertController</span>.createUIAlertController(title: <span class="string">"提示"</span>, message: <span class="string">"扩展到这里就结束了"</span>, leftButton: <span class="string">"取消"</span>, rightButton: <span class="string">"确定"</span>, cancel: &#123;</div><div class="line">                </div><div class="line">                <span class="comment">// 点击取消的按钮</span></div><div class="line">                </div><div class="line">            &#125;, complete: &#123;</div><div class="line">                </div><div class="line">                <span class="comment">// 点击确定的按钮</span></div><div class="line">                </div><div class="line">            &#125;)</div><div class="line">                , animated: <span class="literal">true</span>, completion: <span class="literal">nil</span>)</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在使用Swfit的过程中把各种方法扩展起来,方便用于开发,&lt;strong&gt;Swift3.0&lt;/strong&gt;版本&lt;/p&gt;
    
    </summary>
    
      <category term="Swift" scheme="http://lumengru.com/categories/Swift/"/>
    
    
      <category term="Swift 功能" scheme="http://lumengru.com/tags/Swift-%E5%8A%9F%E8%83%BD/"/>
    
  </entry>
  
  <entry>
    <title>iOS-静态库的打包</title>
    <link href="http://lumengru.com/2017/06/11/iOS-%E9%9D%99%E6%80%81%E5%BA%93%E7%9A%84%E6%89%93%E5%8C%85/"/>
    <id>http://lumengru.com/2017/06/11/iOS-静态库的打包/</id>
    <published>2017-06-11T07:47:28.000Z</published>
    <updated>2017-07-10T02:11:16.000Z</updated>
    
    <content type="html"><![CDATA[<p>这段时间公司需要把一个工程里的代码抽出来制作成静态库, 所以就研究了一下怎么打包静态库</p>
<a id="more"></a>
<h2 id="一些概念的补充"><a href="#一些概念的补充" class="headerlink" title="一些概念的补充"></a>一些概念的补充</h2><ol>
<li><p>什么是库？</p>
<p> 所谓库就是程序代码的集合，是共享程序代码的一种方式。</p>
</li>
<li><p>库的分类</p>
<p> 根据程序代码的开源情况，库可以分为两类</p>
<ul>
<li><p>开源库</p>
<p>源代码是公开的，你可以看到具体实现。比如GitHub上比较出名的第三方框架AFNetworking、SDWebImage。</p>
</li>
<li><p>闭源库</p>
<p>不公开源代码，只公开调用的接口，看不到具体的实现，是一个编译后的二进制文件。这种常见于一些公司的SDK包，比如高德地图SDK、环信即时通讯SDK等等。而闭源库又分为两类：静态库和动态库。本篇重点要讲的便是其中的静态库。</p>
</li>
</ul>
</li>
</ol>
<p>3、静态库和动态库的存在形式和使用区别</p>
<ol>
<li><p>存在形式：</p>
<ul>
<li><p>静态库</p>
<p>  以”.a”或者“.framework”为文件后缀名</p>
</li>
<li><p>动态库</p>
<p>  以”.dylib”或者“.framework”为文件后缀名</p>
</li>
</ul>
</li>
<li><p>使用区别：</p>
<ul>
<li>静态库链接时会被完整的复制到可执行文件中，被多次使用就有多份拷贝。</li>
<li>动态库链接时不复制，程序运行时由系统动态加载到内存，供程序调用。而且系统只加载一次，多个程序共用，节省内存。</li>
</ul>
</li>
</ol>
<h2 id="a文件静态库打包"><a href="#a文件静态库打包" class="headerlink" title=".a文件静态库打包"></a>.a文件静态库打包</h2><ol>
<li><p>打开Xcode创建一个新的工程，这里以Xcode8为例，选择工程如下：</p>
<p> <img src="http://ody22imht.bkt.clouddn.com/WX20170611-160303@2x.png" style="zoom:30%"></p>
</li>
<li><p>把需要打包的文件放入到根目录里面<strong>(注意是根目录)</strong></p>
<ul>
<li><p>自动生成的 <strong>.h</strong> 和 <strong>.m</strong> 文件可以删除</p>
<p><img src="http://ody22imht.bkt.clouddn.com/WX20170611-160841@2x.png" style="zoom:30%"></p>
</li>
</ul>
</li>
<li><p>公开接口或者头文件供人调用</p>
<ul>
<li>targets-&gt;Build Phases-&gt;Copy Files-&gt;”+”你需要公开的头文件</li>
<li><img src="http://ody22imht.bkt.clouddn.com/WX20170611-161122@2x.png" style="zoom:30%"></li>
</ul>
</li>
</ol>
<ol>
<li><p>静态库也分为 <strong>Debug</strong> 和 <strong>Release</strong> 这里我们可以直接选择 Release</p>
<p> <img src="http://ody22imht.bkt.clouddn.com/WX20170611-161212@2x.png" style="zoom:30%"></p>
</li>
<li><p>选择编译设备(真机 或者 模拟器)</p>
<ul>
<li><p>注: 真机打包的只能在真机上运行, 模拟器打包的只能在模拟器上运行, 不然会报错, 可以在真机上打一个包, 模拟器上打一个包 然后合并.</p>
<p><img src="http://ody22imht.bkt.clouddn.com/WX20170611-161949@2x.png" style="zoom:30%"></p>
</li>
</ul>
</li>
<li><p>此时需要配置的都已经完成按住 <strong>cmd+B</strong> 编译成功之后可以看到 <strong>Products</strong> 文件夹里面的 <strong>.a</strong> 文件从红色变成黑色(注: 可能不会改变颜色, 可以关闭 Xcode 重新打开, 此时颜色应该改变了,不改变也没有关系!!!)</p>
<ul>
<li><p>选中文件点击 <strong>Show in Finder</strong></p>
<p><img src="http://ody22imht.bkt.clouddn.com/WX20170611-161808@2x.png" style="zoom:30%"></p>
</li>
<li><p>此时文件里面有个 <strong>.a</strong> 文件 和 一个文件夹如果要使用这个的话需要把两个文件全部放到工程文件里面</p>
<p> <img src="http://ody22imht.bkt.clouddn.com/WX20170611-162314@2x.png" style="zoom:30%"></p>
</li>
</ul>
</li>
</ol>
<h2 id="framework文件静态库打包"><a href="#framework文件静态库打包" class="headerlink" title=".framework文件静态库打包"></a>.framework文件静态库打包</h2><ol>
<li><p>和 <strong>.a</strong> 文件的创建一样 直接把需要打包的代码放到根目录里面, 不同的是 <strong>自动生成的.h</strong> 文件不用删除 (注: 可以把需要暴露出来的多个头文件放到这个<strong>.h</strong>文件中,到时只要引用这一次头文件就OK了)<br><img src="http://ody22imht.bkt.clouddn.com/WX20170611-173037@2x.png" style="zoom:30%"></p>
</li>
<li><p>把需要暴露出来的头文件写入到<strong>.h</strong>文件里面,写法<strong>&lt;工程名/头文件.h&gt;</strong></p>
<p><img src="http://ody22imht.bkt.clouddn.com/WX20170612-091729@2x.png" style="zoom:30%"></p>
</li>
<li><p>暴露头文件,和 <strong>.a</strong> 文件不同的是 <strong>.framework</strong>文件是在 <strong>Headers</strong> 里面暴露出来</p>
<p><img src="http://ody22imht.bkt.clouddn.com/WX20170611-173406@2x.png" style="zoom:30%"></p>
</li>
<li><p>和 <strong>.a</strong>文件一样,<strong>.frmeworke</strong>静态库也分为 <strong>Debug</strong> 和 <strong>Release</strong> 这里我们可以直接选择 Release</p>
<p> <img src="http://ody22imht.bkt.clouddn.com/WX20170611-161212@2x.png" style="zoom:30%"></p>
</li>
<li><p>设置打包的是静态库。因为动态库也可以是以framework形式存在，所以需要设置，否则默认打出来的是动态库</p>
<ul>
<li><p>target-&gt;BuildSetting -&gt;搜索关键字mach-&gt;Mach-o Type 设为Static Library（这个默认选项是动态的）</p>
<p><img src="http://ody22imht.bkt.clouddn.com/WX20170611-174825@2x.png" style="zoom:30%"></p>
</li>
</ul>
</li>
<li><p>和<strong>.a</strong>文件一样, <strong>.framework</strong> 也分为真机运行 和模拟器运行, 所以 真机运行一次, 模拟器运行一次, 然后合并</p>
<p><img src="http://ody22imht.bkt.clouddn.com/WX20170611-173725@2x.png" style="zoom:30%"></p>
</li>
<li><p>双击<strong>.framework</strong> 文件,可以看到</p>
<p><img src="http://ody22imht.bkt.clouddn.com/WX20170611-174032@2x.png" style="zoom:30%"></p>
</li>
<li><p>把SDK合并完成之后,直接替换掉<strong>.framework</strong> 文件里面的SDK文件就可以了</p>
</li>
</ol>
<h2 id="静态库适配Bitcode"><a href="#静态库适配Bitcode" class="headerlink" title="静态库适配Bitcode"></a>静态库适配Bitcode</h2><p>在我第一次打包成功之后,使用静态库,在运行在真机 模拟器没有任何错误,然后打包工程的时候,报错了,错误信息是没有适配<strong><em>Bitcode</em></strong></p>
<ol>
<li>第一件事是在Target-&gt;Build Settings-&gt;Build Options中开启Enable BitCode.</li>
<li>然后去Target-&gt;Build Settings-&gt;Custom Compiler Flags中加入-fembed-bitcode。</li>
</ol>
<p>如图:</p>
<p><img src="http://ody22imht.bkt.clouddn.com/WX20170710-100148@2x.png" style="zoom:30%"></p>
<h2 id="静态库合并"><a href="#静态库合并" class="headerlink" title="静态库合并"></a>静态库合并</h2><ul>
<li><p>让工程在<strong>真机</strong>和<strong>模拟器</strong>上各运行一次, 然后点击 <strong>Show in Finder</strong> 选择文件夹 <strong>分栏展示</strong>, 可以看到文件的上一级有两个文件夹 <strong>Release-iphoneos</strong> 和 <strong>Release-iphonesimulator</strong></p>
<p><img src="http://ody22imht.bkt.clouddn.com/WX20170611-162630@2x.png" style="zoom:30%"></p>
</li>
<li><p>对这两个.a文件进行合并: 打开终端 在终端里面执行</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">lipo -create 第一个.a文件的绝对路径 第二个.a文件的绝对路径 -output 最终的.a文件路径。</div></pre></td></tr></table></figure>
</li>
</ul>
<p>本文中使用的命令如下:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">lipo -create </div><div class="line">/Users/harvey/Library/Developer/Xcode/DerivedData/FMDB-ctegiztcjikewoeprxxtmryzetfa/Build/Products/Release-iphoneos/libFMDB.a </div><div class="line">/Users/harvey/Library/Developer/Xcode/DerivedData/FMDB-ctegiztcjikewoeprxxtmryzetfa/Build/Products/Release-iphonesimulator/libFMDB.a </div><div class="line">-output </div><div class="line">/Users/harvey/Desktop/libFMDB.a</div></pre></td></tr></table></figure>
<h2 id="静态库的使用"><a href="#静态库的使用" class="headerlink" title="静态库的使用"></a>静态库的使用</h2><ol>
<li><p><strong>.a</strong>静态库的使用</p>
<ul>
<li>把打包生成的 <strong>.a</strong> 文件 和 暴露出来的头文件 及 使用的其他资源(例: 图片, 音频…) 拖入到工程中, 然后在使用的地方导入暴露出来的相应的头文件即可.</li>
</ul>
</li>
<li><p><strong>.framework</strong> 静态库的使用</p>
<ul>
<li><p>直接把打包好的静态块拖入进工程里面, 在相应的地方引入头文件,用尖括号包起来 例:</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#import <span class="meta-string">&lt;LinkPayLoanSDK/LinkPayLoanSDK.h&gt;</span></span></div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ol>
<h2 id="Bundel-文件"><a href="#Bundel-文件" class="headerlink" title="Bundel 文件"></a>Bundel 文件</h2><h3 id="Bundel文件是什么"><a href="#Bundel文件是什么" class="headerlink" title="Bundel文件是什么"></a>Bundel文件是什么</h3><ol>
<li><p>什么是Bundle文件？<br> 简单理解，就是资源文件包。我们将许多图片、XIB、文本文件组织在一起，打包成一个Bundle文件。方便在其他项目中引用包内的资源。</p>
</li>
<li><p>Bundle文件的特点？<br> Bundle是静态的，也就是说，我们包含到包中的资源文件作为一个资源包是不参加项目编译的。也就意味着，bundle包中不能包含可执行的文件。它仅仅是作为资源，被解析成为特定的2进制数据。</p>
</li>
</ol>
<h3 id="Bundle文件制作"><a href="#Bundle文件制作" class="headerlink" title="Bundle文件制作"></a>Bundle文件制作</h3><p>直接在桌面新建一个文件夹然后把后缀名改为 <strong>.bundle</strong> 就可以了, 向里面放文件的时候直接双击打开,然后把文件拖入进去</p>
<h3 id="Bundle文件使用"><a href="#Bundle文件使用" class="headerlink" title="Bundle文件使用"></a>Bundle文件使用</h3><p>把生成的<strong>.bundle</strong>文件拖入工程中, 使用规则: <strong>Bundle文件名称.bundle/资源名称</strong>,例:</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[<span class="built_in">UIImage</span> imageNamed:<span class="string">@"LinkPayBundle.bundle/LinkPaySDKback"</span>]</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这段时间公司需要把一个工程里的代码抽出来制作成静态库, 所以就研究了一下怎么打包静态库&lt;/p&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://lumengru.com/categories/iOS/"/>
    
    
      <category term="iOS 功能" scheme="http://lumengru.com/tags/iOS-%E5%8A%9F%E8%83%BD/"/>
    
  </entry>
  
  <entry>
    <title>Swift-时间戳</title>
    <link href="http://lumengru.com/2017/05/31/Swift-%E6%97%B6%E9%97%B4%E6%88%B3/"/>
    <id>http://lumengru.com/2017/05/31/Swift-时间戳/</id>
    <published>2017-05-31T02:47:52.000Z</published>
    <updated>2017-06-11T05:50:23.000Z</updated>
    
    <content type="html"><![CDATA[<p>时间戳是指格林威治时间1970年01月01日00时00分00秒(北京时间1970年01月01日08时00分00秒)起至现在的总秒数。</p>
<a id="more"></a>
<h2 id="获取现在的时间戳-秒"><a href="#获取现在的时间戳-秒" class="headerlink" title="获取现在的时间戳(秒)"></a>获取现在的时间戳(秒)</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">getNowDataString</span><span class="params">()</span></span> -&gt; <span class="type">String</span> &#123;</div><div class="line">        </div><div class="line">     <span class="comment">// 当前的时间 例如 "May 31, 2017, 10:43 AM"</span></div><div class="line">        </div><div class="line">     <span class="keyword">let</span> date:<span class="type">NSDate</span> = <span class="type">NSDate</span>()</div><div class="line">        </div><div class="line">     <span class="comment">// 把时间转换成时间戳 例如 1496198622.22576</span></div><div class="line">        </div><div class="line">     <span class="keyword">let</span> time: <span class="type">TimeInterval</span> = date.timeIntervalSince1970 </div><div class="line">        </div><div class="line">     <span class="keyword">return</span> <span class="type">String</span>(format: <span class="string">"%.0f"</span>, time)</div><div class="line">        </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="根据时间戳-和-指定的时间格式来返回时间-秒"><a href="#根据时间戳-和-指定的时间格式来返回时间-秒" class="headerlink" title="根据时间戳 和 指定的时间格式来返回时间 (秒)"></a>根据时间戳 和 指定的时间格式来返回时间 (秒)</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">yearsMonthDay</span><span class="params">(time: NSNumber, format: String)</span></span> -&gt; <span class="type">String</span> &#123;</div><div class="line">        </div><div class="line">     <span class="comment">// yyyy-MM-dd HH:mm:ss</span></div><div class="line">        </div><div class="line">     <span class="comment">//转换为时间</span></div><div class="line">     </div><div class="line">     <span class="keyword">let</span> timeInterval:<span class="type">TimeInterval</span> = <span class="type">TimeInterval</span>(<span class="type">Int</span>(time))</div><div class="line">        </div><div class="line">     <span class="keyword">let</span> date = <span class="type">Date</span>(timeIntervalSince1970: timeInterval)</div><div class="line">        </div><div class="line">     <span class="comment">//格式话输出</span></div><div class="line">     </div><div class="line">     <span class="keyword">let</span> dformatter = <span class="type">DateFormatter</span>()</div><div class="line">        </div><div class="line">     dformatter.dateFormat = format</div><div class="line">        </div><div class="line">     <span class="keyword">return</span> dformatter.string(from: date)</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="时间戳转换时间-秒"><a href="#时间戳转换时间-秒" class="headerlink" title="时间戳转换时间 (秒)"></a>时间戳转换时间 (秒)</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">dateFrom</span><span class="params">(time: String, format: String)</span></span> -&gt; <span class="type">String</span> &#123;</div><div class="line">  </div><div class="line">      <span class="comment">//格式话输出</span></div><div class="line">      </div><div class="line">      <span class="keyword">let</span> dfmatter = <span class="type">DateFormatter</span>()</div><div class="line">        </div><div class="line">      dfmatter.dateFormat = format</div><div class="line">        </div><div class="line">      <span class="keyword">let</span> date = dfmatter.date(from: time)</div><div class="line">        </div><div class="line">      <span class="keyword">let</span> dateStamp:<span class="type">TimeInterval</span> = date!.timeIntervalSince1970</div><div class="line">        </div><div class="line">      <span class="keyword">let</span> dateSt:<span class="type">Int</span> = <span class="type">Int</span>(dateStamp)</div><div class="line">        </div><div class="line">      <span class="keyword">return</span> <span class="type">String</span>(dateSt)</div><div class="line">      </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="时间格式"><a href="#时间格式" class="headerlink" title="时间格式"></a>时间格式</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">G: 公元时代，例如AD公元</div><div class="line">yy: 年的后2位</div><div class="line">yyyy: 完整年</div><div class="line">MM: 月，显示为1-12,带前置0</div><div class="line">MMM: 月，显示为英文月份简写,如 Jan</div><div class="line">MMMM: 月，显示为英文月份全称，如 Janualy</div><div class="line">dd: 日，2位数表示，如02</div><div class="line">d: 日，1-2位显示，如2，无前置0</div><div class="line">EEE: 简写星期几，如Sun</div><div class="line">EEEE: 全写星期几，如Sunday</div><div class="line">aa: 上下午，AM/PM</div><div class="line">H: 时，24小时制，0-23</div><div class="line">HH: 时，24小时制，带前置0</div><div class="line">h: 时，12小时制，无前置0</div><div class="line">hh: 时，12小时制，带前置0</div><div class="line">m: 分，1-2位</div><div class="line">mm: 分，2位，带前置0</div><div class="line">s: 秒，1-2位</div><div class="line">ss: 秒，2位，带前置0</div><div class="line">S: 毫秒</div><div class="line">Z： GMT（时区）</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;时间戳是指格林威治时间1970年01月01日00时00分00秒(北京时间1970年01月01日08时00分00秒)起至现在的总秒数。&lt;/p&gt;
    
    </summary>
    
      <category term="Swift" scheme="http://lumengru.com/categories/Swift/"/>
    
    
      <category term="Swift 功能" scheme="http://lumengru.com/tags/Swift-%E5%8A%9F%E8%83%BD/"/>
    
  </entry>
  
  <entry>
    <title>Swift-把事件写入到日历中</title>
    <link href="http://lumengru.com/2017/05/31/Swift-%E6%8A%8A%E4%BA%8B%E4%BB%B6%E5%86%99%E5%85%A5%E5%88%B0%E6%97%A5%E5%8E%86%E4%B8%AD/"/>
    <id>http://lumengru.com/2017/05/31/Swift-把事件写入到日历中/</id>
    <published>2017-05-31T02:21:14.000Z</published>
    <updated>2017-06-12T02:24:15.000Z</updated>
    
    <content type="html"><![CDATA[<p>把APP事件写入到苹果软件<strong>日历</strong>中</p>
<a id="more"></a>
<h2 id="事件添加"><a href="#事件添加" class="headerlink" title="事件添加"></a>事件添加</h2><ul>
<li>导入头文件 <strong>import EventKit</strong></li>
<li>创建 <strong>EKEventStore</strong>类型的实例<strong>eventStore</strong> 以及事件的id <strong>eventIdentifier</strong></li>
<li><p>获取请求权限</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> eventStore: <span class="type">EKEventStore</span>!</div><div class="line">      </div><div class="line">eventStore.requestAccess(to: .event) &#123; (success, error) <span class="keyword">in</span></div><div class="line">          </div><div class="line">    <span class="keyword">if</span> error != <span class="literal">nil</span> &#123;</div><div class="line">              </div><div class="line">        <span class="comment">// 错误中心</span></div><div class="line">        <span class="built_in">print</span>(error ?? <span class="string">""</span>)</div><div class="line">              </div><div class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span> !success &#123;</div><div class="line">              </div><div class="line">        <span class="comment">// 用户被拒绝</span></div><div class="line">              </div><div class="line">        <span class="built_in">print</span>(error ?? <span class="string">""</span>)</div><div class="line">              </div><div class="line">    &#125;<span class="keyword">else</span>&#123;</div><div class="line">              </div><div class="line">        <span class="comment">// 创建事件</span></div><div class="line">              </div><div class="line">    &#125;</div><div class="line">          </div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li><p>在else里面创建事件</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> event: <span class="type">EKEvent</span> = <span class="type">EKEvent</span>(eventStore: <span class="keyword">self</span>.eventStore)</div><div class="line">      </div><div class="line">event.title = <span class="string">"您今天该还款了,借贷宝 1000元"</span></div><div class="line">      </div><div class="line">event.location = <span class="string">"我在上海浦东软件园"</span></div><div class="line">      </div><div class="line"><span class="comment">// 开始时间 应该传入时间戳</span></div><div class="line">      </div><div class="line">event.startDate = <span class="keyword">self</span>.dateFrom(time: <span class="string">"2017-05-27 11:37:00"</span>, format: <span class="string">"yyyy-MM-dd HH:mm:ss"</span>)</div><div class="line">      </div><div class="line"><span class="comment">// 结束时间 时间到了 该事件从日历中消失</span></div><div class="line">      </div><div class="line">event.endDate = <span class="keyword">self</span>.dateFrom(time: <span class="string">"2017-05-27 11:38:00"</span>, format: <span class="string">"yyyy-MM-dd HH:mm:ss"</span>)</div><div class="line">      </div><div class="line"><span class="comment">// 提醒时间 按照秒来计算</span></div><div class="line">      </div><div class="line">event.addAlarm(<span class="type">EKAlarm</span>(relativeOffset: -<span class="number">10</span>))</div><div class="line">      </div><div class="line">event.addAlarm(<span class="type">EKAlarm</span>(relativeOffset: -<span class="number">30</span>))</div><div class="line">      </div><div class="line">event.addAlarm(<span class="type">EKAlarm</span>(relativeOffset: -<span class="number">50</span>))</div><div class="line">      </div><div class="line">event.calendar = <span class="keyword">self</span>.eventStore.defaultCalendarForNewEvents</div><div class="line">      </div><div class="line"><span class="keyword">do</span> &#123;</div><div class="line">          </div><div class="line">    <span class="comment">// 事件添加成功</span></div><div class="line">          </div><div class="line">    <span class="keyword">try</span> <span class="keyword">self</span>.eventStore.save(event, span: .thisEvent)</div><div class="line">          </div><div class="line">    <span class="built_in">print</span>(event.eventIdentifier)</div><div class="line">          </div><div class="line">    <span class="keyword">self</span>.eventIdentifier = event.eventIdentifier</div><div class="line">          </div><div class="line">&#125; <span class="keyword">catch</span> &#123;</div><div class="line">          </div><div class="line">    <span class="built_in">print</span>(<span class="string">"有坏银！"</span>)</div><div class="line">          </div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="事件删除"><a href="#事件删除" class="headerlink" title="事件删除"></a>事件删除</h2><ul>
<li><p>根据之前获取的id <strong>“eventIdentifier”</strong></p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> eventToRemove = eventStore.event(withIdentifier: eventIdentifier!)</div><div class="line">      </div><div class="line"><span class="keyword">if</span> (eventToRemove != <span class="literal">nil</span>) &#123;</div><div class="line">          </div><div class="line">    <span class="keyword">do</span> &#123;</div><div class="line">              </div><div class="line">        <span class="keyword">try</span> eventStore.remove(eventToRemove!, span: .thisEvent)</div><div class="line">              </div><div class="line">    &#125; <span class="keyword">catch</span> &#123;</div><div class="line">              </div><div class="line">        <span class="built_in">print</span>(<span class="string">"Bad things happened"</span>)</div><div class="line">              </div><div class="line">    &#125;</div><div class="line">          </div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;把APP事件写入到苹果软件&lt;strong&gt;日历&lt;/strong&gt;中&lt;/p&gt;
    
    </summary>
    
      <category term="Swift" scheme="http://lumengru.com/categories/Swift/"/>
    
    
      <category term="Swift 功能" scheme="http://lumengru.com/tags/Swift-%E5%8A%9F%E8%83%BD/"/>
    
  </entry>
  
  <entry>
    <title>逆向传值</title>
    <link href="http://lumengru.com/2016/11/28/%E9%80%86%E5%90%91%E4%BC%A0%E5%80%BC/"/>
    <id>http://lumengru.com/2016/11/28/逆向传值/</id>
    <published>2016-11-28T14:04:13.000Z</published>
    <updated>2017-06-12T08:44:03.000Z</updated>
    
    <content type="html"><![CDATA[<p>用<strong>代理</strong>和<strong>闭包</strong>进行逆向传值</p>
<a id="more"></a>
<h2 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h2><ul>
<li><p>在第二个页面写一个闭包(要传的值是字符串, 整型, 字典)</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typealias</span> <span class="type">InputClosureType</span> = (<span class="type">String</span>, <span class="type">Int</span>, [<span class="type">String</span>: <span class="type">String</span>]) -&gt; <span class="type">Void</span></div></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li><p>需要在第二个页面理创建一个闭包</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> backClosure: <span class="type">InputClosureType</span>?</div></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li><p>在点击事件里执行闭包</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> <span class="keyword">self</span>.backClosure != <span class="literal">nil</span> &#123;</div><div class="line">          </div><div class="line">   <span class="keyword">self</span>.backClosure?(<span class="string">"卢梦如"</span>, <span class="number">24</span>, [<span class="string">"name"</span>: <span class="string">"卢梦如"</span>])</div><div class="line">          </div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>在第一个页面里创建第二个页面的实例的地方对闭包传值</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">secondVC.backClosure = &#123;</div><div class="line">          </div><div class="line">      (name: <span class="type">String</span>, age: <span class="type">Int</span>, dictionary: [<span class="type">String</span>: <span class="type">String</span>]) -&gt; <span class="type">Void</span> <span class="keyword">in</span></div><div class="line">          </div><div class="line">      <span class="comment">// 打印传过来的数据</span></div><div class="line">          </div><div class="line">      <span class="built_in">print</span>(<span class="string">"\(name) is \(age) years"</span>, dictionary)</div><div class="line">          </div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="代理"><a href="#代理" class="headerlink" title="代理"></a>代理</h2><ul>
<li><p>在第二个页面里 声明一个代理</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">SecondViewControllerDelegate</span>: <span class="title">NSObjectProtocol</span> </span>&#123;</div><div class="line">  </div><div class="line">  <span class="function"><span class="keyword">func</span> <span class="title">backValue</span><span class="params">(string: String, value: Int)</span></span></div><div class="line">  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>定义代理</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> delegate: <span class="type">SecondViewControllerDelegate</span>?</div></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li><p>在点击事件里执行代理</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">if self.delegate != nil &#123;</div><div class="line">          </div><div class="line">   delegate?.backValue(string: &quot;卢梦如&quot;, value: 24)</div><div class="line">          </div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li><p>在第一个页面里面遵守代理, 然后设置代理</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">secondVC.delegate = <span class="keyword">self</span></div></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li><p>执行代理的方法</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">backValue</span><span class="params">(string: String, value: Int)</span></span> &#123;</div><div class="line">      </div><div class="line">     <span class="comment">// 打印传入的数据</span></div><div class="line">      </div><div class="line">     <span class="built_in">print</span>(<span class="string">"\(string) is \(value)"</span>)</div><div class="line">      </div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;用&lt;strong&gt;代理&lt;/strong&gt;和&lt;strong&gt;闭包&lt;/strong&gt;进行逆向传值&lt;/p&gt;
    
    </summary>
    
      <category term="Swift" scheme="http://lumengru.com/categories/Swift/"/>
    
    
      <category term="Swift 功能" scheme="http://lumengru.com/tags/Swift-%E5%8A%9F%E8%83%BD/"/>
    
  </entry>
  
  <entry>
    <title>UIScrollView</title>
    <link href="http://lumengru.com/2016/11/28/UIScrollView/"/>
    <id>http://lumengru.com/2016/11/28/UIScrollView/</id>
    <published>2016-11-28T12:30:01.000Z</published>
    <updated>2017-06-12T08:57:36.000Z</updated>
    
    <content type="html"><![CDATA[<p>用Swift写的UIScrollView文本</p>
<a id="more"></a>
<h2 id="UIScrollView"><a href="#UIScrollView" class="headerlink" title="UIScrollView"></a>UIScrollView</h2><ul>
<li><p>创建 UIScrollView</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> scrollView = <span class="type">UIScrollView</span>(frame: <span class="keyword">self</span>.view.bounds)</div></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li><p>设置 UIScrollView 的大小</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">scrollView.contentSize = <span class="type">CGSize</span>(width: <span class="keyword">self</span>.view.frame.width * <span class="number">4</span>, height: <span class="keyword">self</span>.view.frame.height)</div></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li><p>设置 UIScrollView 的偏移位置</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">scrollView.contentOffset = <span class="type">CGPoint</span>(x: <span class="keyword">self</span>.view.frame.width, y: <span class="number">0</span>)</div></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li><p>设置是否反弹</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">scrollView.bounces = <span class="literal">true</span></div></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li><p>设置是否分页</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">scrollView.isPagingEnabled = <span class="literal">true</span></div></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li><p>设置是否滚动</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">scrollView.isScrollEnabled = <span class="literal">true</span></div></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li><p>设置 <strong>indicator</strong>( 滚动条的颜色 ) 风格</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">scrollView.indicatorStyle = <span class="type">UIScrollViewIndicatorStyle</span>.white</div></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li><p>设置 内容的边缘和 Indicators 边缘</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">scrollView.contentInset = <span class="type">UIEdgeInsetsMake</span>(<span class="number">0</span>, <span class="number">50</span>, <span class="number">0</span>, <span class="number">0</span>)</div></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li><p>手势放大缩小</p>
<ul>
<li><strong>.minimumZoomScale</strong> = 0.1  最小比例</li>
<li><strong>.maximumZoomScale</strong> = 3    最大比例</li>
</ul>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">scrollView.minimumZoomScale = <span class="number">0.1</span></div><div class="line"></div><div class="line">scrollView.maximumZoomScale = <span class="number">3</span></div></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li><p>设置代理</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">scrollView.delegate = <span class="keyword">self</span></div></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li><p>添加到父视图</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">self</span>.view.addSubview(scrollView)</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="代理方法"><a href="#代理方法" class="headerlink" title="代理方法"></a>代理方法</h2><ul>
<li><p>返回一个放大或者缩小的视图</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">viewForZooming</span><span class="params">(<span class="keyword">in</span> scrollView: UIScrollView)</span></span> -&gt; <span class="type">UIView</span>? &#123;</div><div class="line">   </div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>开始放大或者缩小</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">scrollViewWillBeginZooming</span><span class="params">(<span class="number">_</span> scrollView: UIScrollView, with view: UIView?)</span></span> &#123;</div><div class="line">   </div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>缩放结束时</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">scrollViewDidEndZooming</span><span class="params">(<span class="number">_</span> scrollView: UIScrollView, with view: UIView?, atScale scale: CGFloat)</span></span> &#123;</div><div class="line">     </div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li><p>视图已经放大或缩小</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">scrollViewDidZoom</span><span class="params">(<span class="number">_</span> scrollView: UIScrollView)</span></span> &#123;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li><p>滑动到顶部时调用该方法</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">scrollViewDidScrollToTop</span><span class="params">(<span class="number">_</span> scrollView: UIScrollView)</span></span> &#123;</div><div class="line">     </div><div class="line">   	<span class="built_in">print</span>(<span class="string">"顶部"</span>)</div><div class="line">     </div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li><p>正在滑动</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">scrollViewDidScroll</span><span class="params">(<span class="number">_</span> scrollView: UIScrollView)</span></span> &#123;</div><div class="line">     </div><div class="line">   	<span class="built_in">print</span>(<span class="string">"正在滑动..."</span>)</div><div class="line">     </div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li><p>开始拖动</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">scrollViewWillBeginDragging</span><span class="params">(<span class="number">_</span> scrollView: UIScrollView)</span></span> &#123;</div><div class="line">     </div><div class="line">   	<span class="built_in">print</span>(<span class="string">"开始拖动"</span>)</div><div class="line">     </div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li><p>结束拖动</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">scrollViewDidEndDragging</span><span class="params">(<span class="number">_</span> scrollView: UIScrollView, willDecelerate decelerate: Bool)</span></span> &#123;</div><div class="line">     </div><div class="line">   	<span class="built_in">print</span>(<span class="string">"结束拖动"</span>)</div><div class="line">     </div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li><p>开始减速</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">scrollViewWillBeginDecelerating</span><span class="params">(<span class="number">_</span> scrollView: UIScrollView)</span></span> &#123;</div><div class="line">     </div><div class="line">   	<span class="built_in">print</span>(<span class="string">"开始减速..."</span>)</div><div class="line">     </div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li><p>减速停止</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">scrollViewDidEndDecelerating</span><span class="params">(<span class="number">_</span> scrollView: UIScrollView)</span></span> &#123;</div><div class="line">     </div><div class="line">   	<span class="built_in">print</span>(<span class="string">"减速停止"</span>)</div><div class="line">     </div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;用Swift写的UIScrollView文本&lt;/p&gt;
    
    </summary>
    
      <category term="Swift" scheme="http://lumengru.com/categories/Swift/"/>
    
    
      <category term="Swift 控件" scheme="http://lumengru.com/tags/Swift-%E6%8E%A7%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>Hexo + Github pages 搭建个人博客</title>
    <link href="http://lumengru.com/2016/09/22/Hexo-Github-pages-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    <id>http://lumengru.com/2016/09/22/Hexo-Github-pages-搭建个人博客/</id>
    <published>2016-09-22T14:28:48.000Z</published>
    <updated>2017-06-11T06:31:32.000Z</updated>
    
    <content type="html"><![CDATA[<p>把搭建博客的每一步都记录下来.</p>
<a id="more"></a>
<h2 id="Github-hexo"><a href="#Github-hexo" class="headerlink" title="Github hexo"></a>Github hexo</h2><p>可以根据<a href="https://hexo.io/zh-cn/" target="_blank" rel="external">Hexo文档</a>来开发,这里都有详细的教程.</p>
<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><ul>
<li>安装<a href="https://nodejs.org/en/" target="_blank" rel="external">Node.js</a></li>
<li>安装<a href="https://git-scm.com" target="_blank" rel="external">Git</a></li>
<li>安装hexo</li>
<li><p>在终端里面执行以下代码安装 <strong>npm</strong>:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install</div></pre></td></tr></table></figure>
</li>
</ul>
<p>安装完之后在分别终端里面输入:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">git --version</div><div class="line">node -v</div><div class="line">npm -v</div></pre></td></tr></table></figure>
<p>看到各个插件的版本之后才说明是准备工作完成.</p>
<h2 id="开始搭建博客"><a href="#开始搭建博客" class="headerlink" title="开始搭建博客"></a>开始搭建博客</h2><ul>
<li><p>找一个自己喜欢的路径,创建一个的文件夹Hexo,在终端里打开这个Hexo 文件夹,然后执行:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo init</div></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li><p>到现在就安装好了所有的东西</p>
<p>继续在打开的Hexo文件的终端分别输入:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">hexo generate</div><div class="line">hexo server</div></pre></td></tr></table></figure>
<p>也可以简写为:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">hexo g</div><div class="line">hexo s</div></pre></td></tr></table></figure>
</li>
</ul>
<p><strong>hexo generate</strong> 是生成静态页面, <strong>hexo server</strong> 是启动本地调试.</p>
<p>完成之后打开浏览器输入网址 <strong>localhost:4000</strong>,就可以看到本地已经出现hexo初始的博客了</p>
<h2 id="在Github上面创建新的仓库"><a href="#在Github上面创建新的仓库" class="headerlink" title="在Github上面创建新的仓库"></a>在Github上面创建新的仓库</h2><ul>
<li><p>点击 <strong>New repository</strong> 进入创建仓库界面,新建的仓库名字格式必须是:xxxx.github.io,如下图</p>
<p>  <img src="http://ody22imht.bkt.clouddn.com/github1.io.png" alt="Alt text"></p>
</li>
<li><p>创建 <strong>SSH keys</strong> 在终端里面输入</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> ~/.ssh</div></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li><p>查看此文件夹里面是否有 <strong><em>id _rsa  id _rsa.pub</em></strong>  两个文件,如果有的话就说明已经有 <strong>SSH keys</strong> 了</p>
<p> 如果没有的话就自己生成一个,终端里面输入你自己的邮箱:</p>
  <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh-keygen -t rsa -C <span class="string">"your_email@example.com"</span></div></pre></td></tr></table></figure>
<p>  然后会出现 :</p>
  <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Generating public/private rsa key pair.</div><div class="line">Enter file <span class="keyword">in</span> <span class="built_in">which</span> to save the key (/Users/you/.ssh/id_rsa):</div></pre></td></tr></table></figure>
<p>  意思是让你输入 <strong><em>SSH keys</em></strong> 的保存地址 直接回车就好,不用理会,然后会出现:</p>
  <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Enter passphrase (empty <span class="keyword">for</span> no passphrase): [Type a passphrase]</div></pre></td></tr></table></figure>
<p>  意思是让你输入密码,这个要记住,以后会用的到,创建成功之后他会提示你 <strong><em>SSH keys</em></strong> 保存到哪里,按照这个地址找到 <strong>id _rsa.pub</strong>. 这个就是 <strong><em>SSH key</em></strong>,用终端打开这个文件,然后拷贝里面的内容,最上面的那部分</p>
</li>
</ul>
<ul>
<li><p>为github仓库添加 <strong><em>SSH key</em></strong>,进入Github的设置里面,找到 <strong>SSH and GPG keys</strong>进入里面点击 <strong>New SSH key</strong> 把之前拷贝的内容放进去,然后确定就OK了.</p>
<p>在终端里面输入:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh -T git@github.com</div></pre></td></tr></table></figure>
</li>
</ul>
<p>  来测试链接是否成功.</p>
<p>  它可能会出现一些乱七八糟的提示,最后是问你yes/no,就输入yes.</p>
<p>  如果是:</p>
  <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Enter passphrase <span class="keyword">for</span> key <span class="string">'/c/Users/2000104591/.ssh/id_rsa'</span>:</div></pre></td></tr></table></figure>
<p>  输入之前让你记住的那个密码就行了.</p>
<p>  最后提示你:</p>
  <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Hi, 用户名/用户名.github.io! You<span class="string">'ve successfully authenticated, but GitHub does notprovide shell access.</span></div></pre></td></tr></table></figure>
<p>  这样就配置完毕了</p>
<ul>
<li><p>配置 <em>_config.yml</em> 文件,在让你新建的 <strong>Hexo</strong> 目录下有个 <em>_ config.yml</em> 文件,打开他把里面的 <strong>deploy:</strong> 下的东西改为</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">deploy:</div><div class="line">      <span class="built_in">type</span>: git</div><div class="line">      repository: https://github.com/xxxx/xxxx.github.io</div><div class="line">      branch: master</div></pre></td></tr></table></figure>
<p>配置完成以后,执行:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">hexo generate 		</div><div class="line">hexo deploy</div></pre></td></tr></table></figure>
</li>
</ul>
<p>  如果报错:</p>
  <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Error: Deployer not found : github</div></pre></td></tr></table></figure>
<p>  执行如下命令:</p>
  <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install hexo-deployer-git --save</div></pre></td></tr></table></figure>
<p>  成功之后再试一次输入:</p>
  <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">hexo g</div><div class="line">hexo d</div></pre></td></tr></table></figure>
<p>  提示你成功之后你就可以打开<strong>xxxx.github.io</strong>来查看你的博客了.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;把搭建博客的每一步都记录下来.&lt;/p&gt;
    
    </summary>
    
      <category term="博客" scheme="http://lumengru.com/categories/%E5%8D%9A%E5%AE%A2/"/>
    
    
      <category term="博客" scheme="http://lumengru.com/tags/%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
</feed>
